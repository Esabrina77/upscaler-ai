
// ================================
// scripts/setup-prisma.js - Script d'initialisation Prisma
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

async function setupPrisma() {
  console.log('üîß Configuration de Prisma...');
  
  try {
    // V√©rifier que le fichier .env existe avec DATABASE_URL
    const envPath = path.join(process.cwd(), '.env');
    if (!fs.existsSync(envPath)) {
      throw new Error('.env file not found');
    }
    
    const envContent = fs.readFileSync(envPath, 'utf8');
    if (!envContent.includes('DATABASE_URL')) {
      console.log('‚ö†Ô∏è Ajout de DATABASE_URL dans .env...');
      
      const databaseUrl = '\n# Base de donn√©es PostgreSQL avec Prisma\nDATABASE_URL="postgresql://ai_upscaler_user:ai_upscaler_2024!@localhost:5432/ai_upscaler"\n';
      fs.appendFileSync(envPath, databaseUrl);
      
      console.log('‚úÖ DATABASE_URL ajout√©e');
    }
    
    // G√©n√©rer le client Prisma
    console.log('üì¶ G√©n√©ration du client Prisma...');
    execSync('npx prisma generate', { stdio: 'inherit' });
    
    // Cr√©er et appliquer la migration initiale
    console.log('üóÑÔ∏è Cr√©ation de la migration initiale...');
    execSync('npx prisma migrate dev --name init', { stdio: 'inherit' });
    
    console.log('‚úÖ Prisma configur√© avec succ√®s !');
    
    // V√©rifier la connexion
    const { prisma } = require('../config/prisma');
    const userCount = await prisma.user.count();
    const jobCount = await prisma.job.count();
    
    console.log('üìä √âtat de la base de donn√©es :');
    console.log(`   - Utilisateurs : ${userCount}`);
    console.log(`   - Jobs : ${jobCount}`);
    
    await prisma.$disconnect();
    
  } catch (error) {
    console.error('‚ùå Erreur setup Prisma :', error.message);
    
    if (error.message.includes('database') && error.message.includes('does not exist')) {
      console.log('\nüí° Solution :');
      console.log('1. Assurez-vous que PostgreSQL est d√©marr√©');
      console.log('2. Cr√©ez la base de donn√©es : sudo -u postgres createdb ai_upscaler');
      console.log('3. Cr√©ez l\'utilisateur avec les commandes SQL fournies');
    }
    
    process.exit(1);
  }
}

// Lancer le setup si appel√© directement
if (require.main === module) {
  setupPrisma();
}

module.exports = setupPrisma;